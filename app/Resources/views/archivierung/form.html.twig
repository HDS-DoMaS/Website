{% extends 'base.html.twig' %}
{% form_theme form 'bootstrap_3_horizontal_layout.html.twig' %}
{% block bodyclass %}archivierung-form{% endblock %}
{% block title %}DoMaS | Neue Archivierung{% endblock %}
{% block stylesheets %}
    {{ parent() }}
    <link href="{{ asset('assets/css/bootstrap-switch.css') }}" rel="stylesheet" type="text/css" />
{% endblock %}

{% block body %}
    {% set zusatzCount = 0 %}
    {% set keywordCount = 0 %}
    {% set referenzenCount = 0 %}
    {% set prototypeId = form_widget(form.zusaetze.vars.prototype.archivZusatzKategorieId) %}
    {% set prototypeBezeichnung = form_widget(form.zusaetze.vars.prototype.bezeichnung) %}
    <form class="form-horizontal" method="post" name="form" enctype="multipart/form-data">
        <h1>
            {% block headline %}
                Neue
                <select id="form_kategorie" class="form-control" required="required" name="form[kategorie]" onchange="this.options[this.selectedIndex].getAttribute('redirectLink') && (window.location = this.options[this.selectedIndex].getAttribute('redirectLink'));">
                    {% for key,val in form.kategorie.vars.choices %}
                        <option redirectLink="{{ path('_neuArchivierung', {'archivKategorie': val.label}) }}" value="{{ val.value }}" {{  form.kategorie.vars.value == '' and key==0 ? ' selected ' :(val.label == app.request.get('archivKategorie') ? ' selected ' : '') }}>{{ val.label | trans }}</option>
                    {% endfor %}
                </select>
                hochladen
            {% endblock %}
        </h1>
        <div class="body container">
            {% for flash_message in app.session.flashBag.get('success') %}
                <div class="alert alert-success">
                    <button type="button" class="close" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    {{ flash_message }}
                </div>
            {% endfor %}

            <div id="form">
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="form_titel">Titel</label>
                    <div class="col-sm-10">
                        <input id="form_titel" class="form-control" type="text" required="required" name="form[titel]" value="{{ form.titel.vars.value }}">
                    </div>
                </div>
                <div class="form-group">
                    {% set zusatzKategorie = 1 %}
                    <label class="col-sm-2 control-label required" for="form_autor">
                        {% block autor %}
                            Autor
                        {% endblock %}
                    </label>
                    <div class="col-sm-10">
                        <ul class="zusaetze" data-button="Autor" data-zusatzkategorie="{{ zusatzKategorie }}" data-id="{{ prototypeId|e('html_attr') }}" data-bezeichnung="{{ prototypeBezeichnung|e('html_attr') }}">
                            {% for zusatz in form.zusaetze %}
                                {% if zusatz.vars.value.archivZusatzKategorieId == zusatzKategorie %}
                                    <li>
                                        <div class="col-sm-10">
                                            <input type="hidden" id="form_zusaetze_{{ zusatzCount }}_archivZusatzKategorieId" name="form[zusaetze][{{ zusatzCount }}][archivZusatzKategorieId]" required="required" class="form-control" value="{{ zusatz.vars.value.archivZusatzKategorieId }}" />
                                            <input type="text" id="form_zusaetze_{{ zusatzCount }}_bezeichnung" name="form[zusaetze][{{ zusatzCount }}][bezeichnung]" required="required" class="form-control typeahead" data-typehead="zusatz-autor" value="{{ zusatz.vars.value.bezeichnung }}" />
                                        </div>
                                    </li>
                                    {% set zusatzCount = zusatzCount + 1 %}
                                {% endif %}
                            {% endfor %}
                        </ul>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="form_sichtbarkeit">Sichtbarkeit</label>
                    <div class="col-sm-10">
                        <div class="checkbox">
                            <label>
                                {% if form.sichtbarkeit.vars.data == true or form.sichtbarkeit.vars.data is null %}
                                    <input id="form_sichtbarkeit" type="checkbox" checked="checked" name="form[sichtbarkeit]">
                                {% else %}
                                    <input id="form_sichtbarkeit" type="checkbox" name="form[sichtbarkeit]">
                                {% endif %}
                            </label>

                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="form_fachbereich">Fachbereich & Studiengang</label>
                    <div class="col-sm-5">
                        <select id="form_fachbereich" class="form-control" required="required" name="form[fachbereich]" onchange="hideWrongStudiengaenge();">
                            {% for key,val in form.fachbereich.vars.choices %}
                                <option value="{{ val.value }}" {{  form.fachbereich.vars.value == '' and key==0 ? ' selected ' :(val.value == form.fachbereich.vars.value ? ' selected ' : '') }} class="fachbereich{{ key }}">
                                    {{ val.label | trans }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                    <div class="col-sm-5">
                        <select id="form_studiengang" class="form-control" required="required" name="form[studiengang]">
                            {% for key,val in form.studiengang.vars.choices %}
                                <option value="{{ val.value }}" {{  form.studiengang.vars.value == '' and key==0 ? ' selected ' :(val.value == form.studiengang.vars.value ? ' selected ' : '') }} class="fachbereich{{ val.data.fachbereichId }}">
                                    {{ val.label | trans }}
                                </option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="form_beschreibung">Beschreibung</label>
                    <div class="col-sm-10">
                        <textarea id="form_beschreibung" class="form-control" required="required" name="form[beschreibung]">{{ form.beschreibung.vars.value }}</textarea>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="form_abgabedatum">
                        {% block abgabedatum %}
                            Abgabedatum
                        {% endblock %}
                    </label>
                    <div class="col-sm-10">
                        <input id="form_abgabedatum" class="form-control datepicker-single" type="text" value="{{ form.abgabedatum.vars.value }}" required="required" name="form[abgabedatum]">
                    </div>
                </div>
                {% block betreuer %}
                    <div class="form-group">
                        {% set zusatzKategorie = 2 %}
                        <label class="col-sm-2 control-label required" for="form_betreuer">Betreuer</label>
                        <div class="col-sm-10">
                            <ul class="zusaetze" data-button="Betreuer" data-zusatzkategorie="{{ zusatzKategorie }}" data-id="{{ prototypeId|e('html_attr') }}" data-bezeichnung="{{ prototypeBezeichnung|e('html_attr') }}">
                                {% for zusatz in form.zusaetze %}
                                    {% if zusatz.vars.value.archivZusatzKategorieId == zusatzKategorie %}
                                        <li>
                                            <div class="col-sm-10">
                                                <input type="hidden" id="form_zusaetze_{{ zusatzCount }}_archivZusatzKategorieId" name="form[zusaetze][{{ zusatzCount }}][archivZusatzKategorieId]" required="required" class="form-control" value="{{ zusatz.vars.value.archivZusatzKategorieId }}" />
                                                <input type="text" id="form_zusaetze_{{ zusatzCount }}_bezeichnung" name="form[zusaetze][{{ zusatzCount }}][bezeichnung]" required="required" class="form-control typeahead" data-typehead="zusatz-betreuer" value="{{ zusatz.vars.value.bezeichnung }}" />
                                            </div>
                                        </li>
                                        {% set zusatzCount = zusatzCount + 1 %}
                                    {% endif %}
                                {% endfor %}
                            </ul>
                        </div>
                    </div>
                {% endblock %}
                {% block  betreuendesUnternehmen %}
                    <div class="form-group">
                        {% set zusatzKategorie = 3 %}
                        <label class="col-sm-2 control-label required" for="form_unternehmen">Betreuendes Unternehmen</label>
                        <div class="col-sm-10">
                            <ul class="zusaetze" data-button="Unternehmen" data-zusatzkategorie="{{ zusatzKategorie }}" data-id="{{ prototypeId|e('html_attr') }}" data-bezeichnung="{{ prototypeBezeichnung|e('html_attr') }}">
                                {% for zusatz in form.zusaetze %}
                                    {% if zusatz.vars.value.archivZusatzKategorieId == zusatzKategorie %}
                                        <li>
                                            <div class="col-sm-10">
                                                <input type="hidden" id="form_zusaetze_{{ zusatzCount }}_archivZusatzKategorieId" name="form[zusaetze][{{ zusatzCount }}][archivZusatzKategorieId]" required="required" class="form-control" value="{{ zusatz.vars.value.archivZusatzKategorieId }}" />
                                                <input type="text" id="form_zusaetze_{{ zusatzCount }}_bezeichnung" name="form[zusaetze][{{ zusatzCount }}][bezeichnung]" required="required" class="form-control typeahead" data-typehead="zusatz-unternehmen" value="{{ zusatz.vars.value.bezeichnung }}" />
                                            </div>
                                        </li>
                                        {% set zusatzCount = zusatzCount + 1 %}
                                    {% endif %}
                                {% endfor %}
                            </ul>
                        </div>
                    </div>
                {% endblock %}
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="form_dateiuploads">Dateiuploads</label>
                    <div class="col-sm-10 fileupload">
                        <input type="file" name="fileToUpload" id="fileToUpload" class="file"/>
                        <span class="btn">Datei hochladen</span>

                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="referenzenSuche">Referenzen</label>
                    <div class="col-sm-10 col-referenzen">
                        <table class="referenzen" data-id="{{ form_widget(form.referenzen.vars.prototype.archivId)|e('html_attr') }}" data-titel="{{ form_widget(form.referenzen.vars.prototype.titel)|e('html_attr') }}">
                            {% for referenz in form.referenzen %}
                                <tr>
                                    <td>
                                        <input type="text" id="form_referenzen_{{ referenzenCount }}_archivId" name="form[referenzen][{{ referenzenCount }}][archivId]" required="required" class="form-control" value="{{ referenz.vars.value.archivId }}" />
                                        <input type="text" id="form_referenzen_{{ referenzenCount }}_titel" name="form[referenzen][{{ referenzenCount }}][titel]" required="required" class="form-control" value="{{ referenz.vars.value.titel }}" />
                                        <a href="{{ path('_detailView', {'archivId': referenz.vars.value.archivId}) }}" target="_blank"><span class="glyphicon glyphicon-link"></span> {{ referenz.vars.value.titel }}</a>
                                    </td>
                                </tr>

                                {% set referenzenCount = referenzenCount + 1 %}
                            {% endfor %}
                        </table>
                        <input type="text" class="form-control" id="referenzenSuche" name="referenzenSuche" value="" placeholder="Archivierungen durchsuchen">
                        <div class="referenzen-container">
                            <div class="table-responsive">
                                <table id="referenzenTabelle" class="table table-striped table-bordered table-condensed"></table>
                            </div>
                            <div id="referenzenPaging"></div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required" for="form_dateiuploads">Keywords</label>
                    <div class="col-sm-10">
                        <ul class="keywords" data-prototype="{{ form_widget(form.keywords.vars.prototype.keyword)|e('html_attr') }}">
                            {% for keyword in form.keywords %}
                                <li>
                                    <div class="col-sm-10">
                                        <input type="text" id="form_keywords_{{ keywordCount }}_keyword" name="form[keywords][{{ keywordCount }}][keyword]" required="required" class="form-control typeahead" data-typehead="keywords" value="{{ keyword.vars.value.keyword }}" />
                                    </div>
                                </li>
                                {% set keywordCount = keywordCount + 1 %}
                            {% endfor %}
                        </ul>
                    </div>
                </div>
                {{ form_row(form.anhaenge) }}
                <div class="form-group">
                    <div class="col-sm-2"></div>
                    <div class="col-sm-10">
                        {% block zurueckButton %}
                            <a href="{{ path('_suche')}}" class="btn btn-default">zur Suche</a>
                        {% endblock %}
                        <button type="submit" id="form_speichern" name="form[speichern]" class="btn-red btn">speichern</button>
                    </div>
                </div>
            </div>
            {{ form_widget(form._token) }}
        </div>
    </form>
    {#{{ form_start(form) }}
    {{ form_widget(form) }}
    {{ form_end(form) }}#}


    {#{{ dump(form) }}#}
{% endblock %}

{% block javascripts %}
    <script src="{{ asset('assets/js/bootstrap-switch.js') }}"></script>
    <script type="text/javascript">
        $("[name='form[sichtbarkeit]']").bootstrapSwitch();

        var $collectionHolderZusaetze;
        var $collectionHolderReferenzen;

        function addZusatzForm($collectionHolderZusaetze, $newLinkLi, zusatz) {
            // Get the data-prototype explained earlier
            var prototypeId = $collectionHolderZusaetze.data('id');
            var prototypeBezeichnung = $collectionHolderZusaetze.data('bezeichnung');

            // get the new index
            var index = $collectionHolderZusaetze.data('index');

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            var newForm = prototypeId.replace(/__name__/g, index)
                    + prototypeBezeichnung.replace(/__name__/g, index).replace('class="form-control"', 'class="form-control typeahead" data-typehead="zusatz-' + zusatz.toLowerCase() + '"');

            // increase the index with one for the next item
            $('ul.zusaetze').data('index', index + 1);

            // Display the form in the page in an li, before the "add" link li
            var $newFormLi = $('<li></li>').append(newForm);

            $newLinkLi.before($newFormLi);
            $newFormLi.wrapInner('<div class="col-sm-10"></div>');

            // set the ID in the hidden field
            $newFormLi.find("input[id$='archivZusatzKategorieId']").val($collectionHolderZusaetze.data('zusatzkategorie'));

            // Typeahead binden
            $newFormLi.find('.typeahead').each(function() {
                bindTypeahead($(this));
            });

            // add a delete link
            addZusatzFormDeleteLink($newFormLi);
        }

        function addZusatzFormDeleteLink($zusatzFormLi) {
            var $removeFormA = $('<a href="#" class="btn"><span class="glyphicon glyphicon-trash"></span> entfernen</a>');
            $zusatzFormLi.append($removeFormA);

            $removeFormA.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // remove the li for the form
                $zusatzFormLi.remove();
            });
        }

        var $collectionHolderKeywords;
        // setup an "add a keyword" link
        function addKeywordForm($collectionHolderKeywords, $newLinkLiKeywords) {
            // Get the data-prototype explained earlier
            var prototype = $collectionHolderKeywords.data('prototype');

            // get the new index
            var index = $collectionHolderKeywords.data('index');

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            var newForm = prototype.replace(/__name__/g, index);

            // Typeahead Attribute
            newForm = newForm.replace('class="form-control"', 'class="form-control typeahead" data-typehead="keywords"');

            // increase the index with one for the next item
            $collectionHolderKeywords.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a keyword" link li
            var $newFormLi = $('<li></li>').append(newForm);

            $newLinkLiKeywords.before($newFormLi);
            $newFormLi.wrapInner('<div class="col-sm-10"></div>');

            // Typeahead binden
            $newFormLi.find('.typeahead').each(function() {
                bindTypeahead($(this));
            });

            // add a delete link
            addKeywordFormDeleteLink($newFormLi);
        }

        function addKeywordFormDeleteLink($keywordFormLi) {
            var $removeFormA = $('<a href="#" class="btn"><span class="glyphicon glyphicon-trash"></span> entfernen</a>');
            $keywordFormLi.append($removeFormA);

            $removeFormA.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // remove the li for the keyword form
                $keywordFormLi.remove();
            });
        }

        function addReferenzForm($collectionHolder, archivId, titel) {
            var archivLink = '{{ path('_detailView', {'archivId': 666}) }}';

            // Get the data-prototype explained earlier
            var prototypeId = $collectionHolder.data('id');
            var prototypeTitel = $collectionHolder.data('titel');

            // get the new index
            var index = $collectionHolder.data('index');

            // Replace '__name__' in the prototype's HTML to
            // instead be a number based on how many items we have
            var newForm = prototypeId.replace(/__name__/g, index).replace(/required=/, 'value="' + archivId + '" required=')
                    + prototypeTitel.replace(/__name__/g, index).replace(/required=/, 'value="' + titel + '" required=')
                    + '<a href="' + archivLink.replace(/666/, archivId) + '" target="_blank"><span class="glyphicon glyphicon-link"></span> ' + titel + '</a>';

            // increase the index with one for the next item
            $collectionHolder.data('index', index + 1);

            // Display the form in the page in an li, before the "Add a referenz" link li
            var $newFormTr = $('<tr></tr>').append(newForm).wrapInner('<td></td>');

            $collectionHolder.append($newFormTr);

            // add a delete link
            addReferenzFormDeleteLink($newFormTr);
        }

        function addReferenzFormDeleteLink($newFormTr) {
            var $removeFormA = $('<td><a href="#" class="btn btn-sm"><span class="glyphicon glyphicon-trash"></span>entfernen</a></td>');
            $newFormTr.find('td').after($removeFormA);

            $removeFormA.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // "hinzufügen" Button freigeben
                var archivId = $(this).parent().find('input[id$="_archivId"]').val();
                $('.addReferenz[data-id="' + archivId  + '"]').removeClass('disabled').html('<span class="glyphicon glyphicon-plus"></span>hinzufügen');

                // remove the li for the keyword form
                $newFormTr.remove();
            });
        }

        function IsInReferenzen(id) {
            var isInReferenzen = false;

            $("[name^='form[referenzen]']").each(function() {
                if(this.name.indexOf('archivId') > 0 && this.value == id) {
                    isInReferenzen = true;
                    return true;
                }
            });

            return isInReferenzen;
        }

        function referenzenPaging(response) {
            var html = '';

            if(response.items.length > 0) {
                html += '<div class="pagination">';

                for (page = 1; page <= response.pageCount; page++) {
                    // First
                    if(page == 1) {
                        // First
                        if(page != response.page) {
                            html += '<span class="first">' + '\r\n' + '<a href="#" title="Seite 1" data-page="1">&lt;&lt;</a></span>';
                        } else {
                            html += '<span class="disabled first">&lt;&lt;</span>';
                        }

                        // Previous
                        if(response.page > 1) {
                            html += '<span class="previous">' + '\r\n' + '<a href="#" title="Seite ' + (response.page - 1) + '" data-page="' + (response.page - 1) + '">&lt;</a></span>';
                        }

                        // ..
                        if(response.page - 3 > 1) {
                            html += '<span class="disabled"><span>&hellip;</span></span>';
                        }
                    }

                    // Current in Range
                    if(page <= response.page + 3 && page >= response.page - 3) {
                        if(page != response.page) {
                            html += '<span class="page">' + '\r\n' + '<a href="#" title="Seite ' + page + '" data-page="' + page + '">' + page + '</a></span>';
                        }
                        else {
                            html += '<span class="current">' + page + '</span>';
                        }
                    }

                    // Last
                    if(page == response.pageCount) {
                        // ..
                        if(response.page + 3 < response.pageCount) {
                            html += '<span class="disabled"><span>&hellip;</span></span>';
                        }

                        // Next
                        if(response.page < response.pageCount) {
                            html += '<span class="next">' + '\r\n' + '<a href="#" title="Seite ' + (response.page + 1) + '" data-page="' + (response.page + 1) + '">&gt;</a></span>';
                        }

                        // Last
                        if(page != response.page) {
                            html += '<span class="last">' + '\r\n' + '<a href="#" title="Seite ' + response.pageCount + '" data-page="' + response.pageCount + '">&gt;&gt;</a></span>';
                        } else {
                            html += '<span class="disabled last">&gt;&gt;</span>';
                        }
                    }
                }

                html += '</div>';
            }

            $('#referenzenPaging').html(html);
        }

        function preg_quote (str, delimiter) {
            return (str + '')
                    .replace(new RegExp('[.\\\\+*?\\[\\^\\]$(){}=!<>|:\\' + (delimiter || '') + '-]', 'g'), '\\$&')
        }

        function highlight(html, search) {
            var words = '';

            // Erster Suchparameter
            if(search.length > 0) {
                words = preg_quote(search) + '|' + preg_quote(search).replace(' ', '|');
            }

            if(words.length > 0) {
                html = html.replace(new RegExp( '(' + words + ')', "i"), '<span class="highlight">$1</span>')
            }

            return html;
        }

        function referenzenResponse(response, search) {
            if(response == null) {
                return false;
            }

            // Table Header
            var html = '<tr>'
                    + '<th class="tButton"></th>'
                    + '<th><a>#</a></th>'
                    + '<th><a>Titel</a></th>'
                    + '<th><a>Fachbereich</a></th>'
                    + '<th><a>Studiengang</a></th>'
                    + '<th><a>Kategorie</a></th>'
                    + '<th><a>Abgabe</a></th>'
                    + '</tr>';

            response.items.forEach(function (item) {
                html += '<tr>';

                // Button
                if(IsInReferenzen(item.archivId)) {
                    html += '<td class="tButton"><a href="#" class="addReferenz btn btn-sm disabled" data-id="' + item.archivId + '" data-titel="' + item.titel + '"><span class="glyphicon glyphicon-eject"></span>hinzugefügt</a></td>';
                } else {
                    html += '<td class="tButton"><a href="#" class="addReferenz btn btn-sm" data-id="' + item.archivId + '" data-titel="' + item.titel + '"><span class="glyphicon glyphicon-plus"></span>hinzufügen</a></td>';
                }

                html += '<td>' + item.archivId + '</td>'
                        + '<td>' + highlight(item.titel, search) + '</td>'
                        + '<td>' + highlight(item.fachbereich, search) + '</td>'
                        + '<td>' + highlight(item.studiengang, search) + '</td>'
                        + '<td>' + highlight(item.kategorie, search) + '</td>'
                        + '<td>' + highlight(item.abgabedatum, search) + '</td>';
                        + '</tr>';
            });

            // Paging
            referenzenPaging(response);

            $('#referenzenTabelle').html(html).addClass('visible');
        }

        function referenzenAjaxRequest(page) {
            var search = $('#referenzenSuche').val();

            delay(function() {
                var url = "{{ path('_sucheReferenzen') }}" + search;

                if(page > 1) {
                    url += '?page=' + page;
                }

                $.ajax({
                    url: url,
                    dataType: "json",
                    cache: false,
                    success: function (response) {
                        referenzenResponse(response, search);
                    }
                });
            }, 300);
        }

        var delay = (function(){
            var timer = 0;
            return function(callback, ms){
                clearTimeout (timer);
                timer = setTimeout(callback, ms);
            };
        })();

        jQuery(document).ready(function() {
            var $addZusatzLink = $('<a href="#" class="btn add_zusatzlink"><span class="glyphicon glyphicon-plus"></span> Zusatz hinzufügen</a>');
            var $newLinkLiZusaetze = $('<li></li>').append($addZusatzLink);

            // Get the ul that holds the collection
            $collectionHolder = $('ul.zusaetze');

            // add a delete link to all of the existing keyword form li elements
            $collectionHolder.find('li').each(function() {
                addZusatzFormDeleteLink($(this));
            });

            // add the "add" anchor and li to the ul
            $collectionHolder.append($newLinkLiZusaetze);

            // count the current form inputs
            $collectionHolder.data('index', $collectionHolder.find(':input').length / 2);

            $('.add_zusatzlink').each(function() {
                // change the "add" link text
                var text = $(this).closest('ul.zusaetze').data('button');
                $(this).html('<span class="glyphicon glyphicon-plus"></span>' + text + ' hinzufügen');
            }).on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // add a new form
                addZusatzForm($(this).closest('ul.zusaetze'), $(this), $(this).closest('ul.zusaetze').data('button'));
            });

            var $addKeywordLink = $('<a href="#" class="btn add_keywordlink"><span class="glyphicon glyphicon-plus"></span> Keyword hinzufügen</a>');
            var $newLinkLiKeywords = $('<li></li>').append($addKeywordLink);
            // Get the ul that holds the collection of keywords
            $collectionHolderKeywords = $('ul.keywords');

            // add a delete link to all of the existing keyword form li elements
            $collectionHolderKeywords.find('li').each(function() {
                addKeywordFormDeleteLink($(this));
            });

            // add the "add a keyword" anchor and li to the keywords ul
            $collectionHolderKeywords.append($newLinkLiKeywords);

            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            $collectionHolderKeywords.data('index', $collectionHolderKeywords.find(':input').length);

            $addKeywordLink.on('click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                // add a new keyword form (see next code block)
                addKeywordForm($collectionHolderKeywords, $newLinkLiKeywords);
            });

            $('#referenzenSuche').keypress(function(e) {
                if(e.keyCode == 13) { // Enter
                    e.preventDefault();
                    return false;
                }
            }).keyup(function() {
                referenzenAjaxRequest(1);
            });

            $('#referenzenPaging').delegate('a', 'click', function(e) {
                referenzenAjaxRequest($(this).data('page'));
                e.preventDefault();
                return false;
            });

            $collectionHolderReferenzen = $('table.referenzen');

            // add a delete link to all of the existing referenz form li elements
            $collectionHolderReferenzen.find('tr').each(function() {
                addReferenzFormDeleteLink($(this));
            });

            // count the current form inputs we have (e.g. 2), use that as the new
            // index when inserting a new item (e.g. 2)
            $collectionHolderReferenzen.data('index', $collectionHolderReferenzen.find(':input').length);

            // Click on 'hinzufügen'
            $('#referenzenTabelle').delegate('.addReferenz', 'click', function(e) {
                // prevent the link from creating a "#" on the URL
                e.preventDefault();

                if(false == IsInReferenzen($(this).data('id'))) {
                    addReferenzForm($collectionHolderReferenzen, $(this).data('id'), $(this).data('titel'));
                    $(this).addClass('disabled');
                }

                $(this).html('<span class="glyphicon glyphicon-eject"></span>hinzugefügt');
                this.blur();

                return false;
            });
        });
    </script>

    <script>  //Für das dynamische ändern des Studiengang-Feldes bei Eingabe im Fachbereich-Feld
        var hideWrongStudiengaenge = function() {
            var fachbereiche = document.getElementById("form_fachbereich");
            var fachbereichSelectedClass = fachbereiche.options[fachbereiche.selectedIndex].className;

            $('#form_studiengang option:not(.' + fachbereichSelectedClass + ')').addClass('hidden');
            $('#form_studiengang option.' + fachbereichSelectedClass + ', #form_studiengang option.fachbereich123').removeClass('hidden');

            if($('#form_studiengang option:selected').hasClass('hidden')) {
                var val = $('#form_studiengang option:not(.hidden):first').attr("selected","selected").click().val();
                $('#form_studiengang').val(val).change();
            }
        };
        hideWrongStudiengaenge();
    </script>
{% endblock %}


